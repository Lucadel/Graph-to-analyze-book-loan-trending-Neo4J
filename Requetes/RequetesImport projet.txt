#CONTRAINTES
CREATE CONSTRAINT ON (l:Livre) ASSERT (l.titre, l.auteur) IS NODE KEY;
CREATE CONSTRAINT ON (a:Auteur) ASSERT a.nomauteur IS UNIQUE;
CREATE CONSTRAINT ON (e:Editeur) ASSERT e.nomediteur IS UNIQUE;
CREATE CONSTRAINT ON (c: Categorie) ASSERT c.nomcat IS UNIQUE;


#IMPORT1
USING PERIODIC COMMIT 500 

LOAD CSV WITH HEADERS FROM 'file:///data_litterature.csv' 
AS ligne with ligne where ligne.Titre is not null

   MERGE (l:Livre {titre: trim(ligne.Titre), auteur: trim(ligne.Auteur)}) 
   
   ON CREATE SET l.prets = ToInteger(ligne.prets) 
   ON MATCH SET l.prets = l.prets + ToInteger(ligne.prets) 
      
   ON CREATE SET l.exemplaires = ToInteger(ligne.exemplaires) 
   ON MATCH SET l.exemplaires = l.exemplaires + ToInteger(ligne.exemplaires)
    
   ON CREATE SET l.localisations = ToInteger(ligne.localisations) 
   ON MATCH SET l.localisations = l.localisations + ToInteger(ligne.localisations)

   ON CREATE SET l.soustitre = trim(ligne.sstitre)  
   ON CREATE SET l.langue = trim(ligne.Langue)
   
   SET l.editions =COALESCE(l.editions,[]) + 
   CASE WHEN NOT (trim(ligne.Editeur) +"_"+ trim(ligne.Date)) IN COALESCE(l.editions,[]) 
   THEN (trim(ligne.Editeur) +"_"+ trim(ligne.Date)) 
   END
   
   SET l.date=COALESCE(l.date,[]) + 
   CASE WHEN NOT ToInteger(ligne.Date) IN COALESCE(l.date,[]) 
   THEN ToInteger(ligne.Date) 
   END
 
   SET l.tauxemprunt =round(100-(24-l.prets/l.exemplaires)*100*0.0416666666)
   
   
   MERGE (auteur:Auteur { nomauteur: trim(ligne.Auteur) }) 
   
   MERGE (edi:Editeur { nomediteur: trim(ligne.Editeur) })
   
   MERGE (cat:Categorie { nomcat: trim(ligne.cat)}) 
   
   MERGE (l)-[: ECRIT]->(auteur)
   MERGE (l)-[: EDITE]->(edi) 
   MERGE (l)-[: APPARTIENT]->(cat) ;


IMPORT 2
LOAD CSV WITH HEADERS FROM 'file:///Googlebook_db.csv' 
AS ligne with ligne where ligne.Titre is not null

   MERGE (l:Livre {titre: trim(ligne.Titre), auteur: trim(ligne.Auteur)})  SET l.summary = trim(ligne.Summary)
   
REQUETE 1
MATCH (c:Categorie)--(l:Livre)--(a:Auteur) 
WITH a,c, collect(l.titre) as l ,collect(l.prets) as p, reduce(total=0, number in collect (l.prets) | total + number) as psum
RETURN a.nomauteur , l, p, psum, right(c.nomcat,length(c.nomcat)-4)
ORDER BY psum DESC
LIMIT 10

REQUETE2
MATCH (cat)--(l:Livre)--(a:Auteur)
MATCH (l:Livre)--(e:Editeur)
WHERE left(cat.nomcat,4)="LNAM"
WITH collect(e.nomediteur) as e, a, l
RETURN DISTINCT(l.titre),a.nomauteur,e, l.langue, l.prets
ORDER BY l.prets DESC
LIMIT 20

REQUETE3
MATCH (cat)--(l:Livre)--(a:Auteur)
MATCH (l:Livre)--(e:Editeur)
WITH a,l,collect(distinct(e.nomediteur)) as e
RETURN l.titre, a.nomauteur, e, l.langue, l.tauxemprunt
ORDER BY l.tauxemprunt DESC
LIMIT 20

REQUETE4
MATCH (c:Categorie)--(l:Livre)--(a:Auteur)
WITH a, count(distinct(l.titre)) as rel, collect(l.titre) as l, collect(l.prets) as p, c
RETURN a.nomauteur, l,p,rel,right(c.nomcat,length(c.nomcat)-4)
ORDER BY rel DESC
LIMIT 20

REQUETE5
MATCH (e:Editeur{nomediteur:"Gallimard"})--(l:Livre)--(a:Auteur)
WHERE l.date IS NOT NULL
RETURN l.titre,a.nomauteur,reduce(m=0, t IN l.date | CASE WHEN m > t THEN m ELSE t END) as lastedition, l.tauxemprunt
ORDER BY lastedition DESC
LIMIT 20



MATCH (n) DETACH DELETE(n)



